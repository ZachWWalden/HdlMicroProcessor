$date
	Sat Apr  2 19:35:15 2022
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module datapath $end
$scope module execute_stage $end
$scope module alu $end
$var wire 3 ! alu_flags [2:0] $end
$var wire 2 " alu_operation [1:0] $end
$var wire 1 # alu_operation_select $end
$var wire 16 $ alu_out [15:0] $end
$var wire 1 % clock $end
$var wire 4 & fu_oe [3:0] $end
$var wire 1 ' nreset $end
$var wire 8 ( top_operand [7:0] $end
$var wire 8 ) bottom_operand [7:0] $end
$scope module add_unit $end
$var wire 1 # add_sub $end
$var wire 1 % clock $end
$var wire 3 * flags [2:0] $end
$var wire 1 ' nreset $end
$var wire 1 + oe $end
$var wire 8 , primary_operand [7:0] $end
$var wire 8 - secondary_operand [7:0] $end
$var wire 8 . result [7:0] $end
$var wire 3 / flag_result [2:0] $end
$var reg 9 0 value [8:0] $end
$upscope $end
$scope module bitwise $end
$var wire 1 # and_or $end
$var wire 1 % clock $end
$var wire 3 1 flags [2:0] $end
$var wire 1 ' nreset $end
$var wire 1 2 oe $end
$var wire 8 3 primary_operand [7:0] $end
$var wire 8 4 secondary_operand [7:0] $end
$var wire 8 5 result [7:0] $end
$var wire 3 6 flags_result [2:0] $end
$var reg 8 7 value [7:0] $end
$upscope $end
$scope module multiply_unit $end
$var wire 1 % clock $end
$var wire 3 8 flags [2:0] $end
$var wire 16 9 mult_out [15:0] $end
$var wire 1 ' nreset $end
$var wire 1 : oe $end
$var wire 8 ; primary_operand [7:0] $end
$var wire 8 < secondary_operand [7:0] $end
$var wire 3 = flags_result [2:0] $end
$var reg 16 > result [15:0] $end
$upscope $end
$scope module shifter $end
$var wire 1 % clock $end
$var wire 3 ? flags [2:0] $end
$var wire 1 ' nreset $end
$var wire 1 @ oe $end
$var wire 8 A primary_operand [7:0] $end
$var wire 1 # right_left $end
$var wire 8 B result [7:0] $end
$var wire 3 C flags_value [2:0] $end
$var reg 8 D value [7:0] $end
$var integer 32 E Index [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module datapath $end
$scope module execute_stage $end
$var wire 3 F alu_flags_out [2:0] $end
$var wire 16 G alu_out [15:0] $end
$var wire 1 % clock $end
$var wire 8 H data_in_bot [7:0] $end
$var wire 8 I data_in_top [7:0] $end
$var wire 8 J ex_mem_data_bot [7:0] $end
$var wire 8 K ex_mem_data_top [7:0] $end
$var wire 32 L ex_mem_operation [31:0] $end
$var wire 3 M flags_out [2:0] $end
$var wire 8 N mem_wb_data_bot [7:0] $end
$var wire 8 O mem_wb_data_top [7:0] $end
$var wire 1 ' nreset $end
$var wire 5 P sfr_input_sel [4:0] $end
$var wire 32 Q mem_wb_operation [31:0] $end
$var wire 4 R mem_wb_data_sel_top [3:0] $end
$var wire 7 S mem_wb_data_sel_bot [6:0] $end
$var wire 5 T mem_str_data_sel_top [4:0] $end
$var wire 5 U mem_str_data_sel_bot [4:0] $end
$var wire 32 V instruction [31:0] $end
$var wire 2 W ex_mem_data_input_sel [1:0] $end
$var wire 8 X data_out_top [7:0] $end
$var wire 8 Y data_out_bot [7:0] $end
$var wire 3 Z cur_flags [2:0] $end
$var wire 5 [ alu_top_sel [4:0] $end
$var wire 8 \ alu_data_top_inv [7:0] $end
$var wire 8 ] alu_data_in_top [7:0] $end
$var wire 8 ^ alu_data_in_bot [7:0] $end
$var wire 5 _ alu_bot_sel [4:0] $end
$scope module alu $end
$scope module add_unit $end
$upscope $end
$scope module bitwise $end
$upscope $end
$scope module multiply_unit $end
$upscope $end
$scope module shifter $end
$upscope $end
$upscope $end
$scope module alu_mux $end
$var wire 8 ` ex_mem_bot [7:0] $end
$var wire 8 a ex_mem_top [7:0] $end
$var wire 8 b id_ex_data_bot [7:0] $end
$var wire 8 c id_ex_data_top [7:0] $end
$var wire 8 d mem_wb_bot [7:0] $end
$var wire 8 e mem_wb_top [7:0] $end
$var wire 5 f alu_input_sel_top [4:0] $end
$var wire 5 g alu_input_sel_bot [4:0] $end
$var reg 8 h alu_data_input_bot [7:0] $end
$var reg 8 i alu_data_input_top [7:0] $end
$upscope $end
$scope module ex_mem_input_mux $end
$var wire 8 j alu_res_bot [7:0] $end
$var wire 8 k alu_res_top [7:0] $end
$var wire 8 l id_ex_bot [7:0] $end
$var wire 8 m id_ex_top [7:0] $end
$var wire 2 n sel_signals [1:0] $end
$var reg 8 o ex_data_out_bot [7:0] $end
$var reg 8 p ex_data_out_top [7:0] $end
$upscope $end
$scope module flags_reg $end
$var wire 1 % clock $end
$var wire 3 q new_flags [2:0] $end
$var wire 1 ' nreset $end
$var reg 3 r cur_flags [2:0] $end
$upscope $end
$scope module mem_frwd $end
$var wire 32 s ex_mem_instruction [31:0] $end
$var wire 32 t mem_wb_instruction [31:0] $end
$var wire 32 u instruction [31:0] $end
$var reg 7 v mem_wb_data_sel_bot [6:0] $end
$var reg 4 w mem_wb_data_sel_top [3:0] $end
$var reg 5 x mem_write_data_sel_bot [4:0] $end
$var reg 5 y mem_write_data_sel_top [4:0] $end
$var reg 5 z sfr_input_sel [4:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx z
bx y
bx x
bx w
bx v
b0 u
bx t
b0 s
b0 r
b1 q
b0 p
b0 o
b0 n
b0 m
b0 l
b0 k
b0 j
bx i
bx h
b0 g
b0 f
bx e
bx d
b0 c
b0 b
b0 a
b0 `
b0 _
bx ^
bx ]
bx \
b0 [
b0 Z
b0 Y
b0 X
b0 W
b0 V
bx U
bx T
bx S
bx R
bx Q
bx P
bx O
bx N
b1 M
b0 L
b0 K
b0 J
b0 I
b0 H
b0 G
b1 F
bx E
b0 D
bx01 C
bz B
bx A
0@
b1 ?
b0 >
b1 =
bx <
bx ;
0:
b0 9
b1 8
b0 7
b1 6
bz 5
bx 4
bx 3
02
b1 1
b0 0
b1 /
b0 .
bx -
bx ,
1+
b1 *
bx )
bx (
z'
b1 &
z%
b0 $
0#
b0 "
b1 !
$end
#1
