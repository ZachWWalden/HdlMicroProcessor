{
  /*
   * List of source files (optional, defaults to []).
   * If specificed, must be a list of either strings or source spec tuples, where
   * source spec tuple is a tuple in the form [string, dict[string, string]] (see
   * below for details).
   */
  "sources": [

    /*
     * Sources can be defined solely by their individual paths or glob patterns.
     * Absolute paths are unchanged, relative paths are made absolute by using
     * the path to the configuration file. Sources imported from an included file
     * will follow the same principle but using the path to the included path.
     */
    "ex_mem_data_input_mux.v"

    /*
     * Tuples can be used to add more info on the path. First element of the
     * tuple must the a string with the path, second element is optional
     * (defaults to an empty dictionary). Dictionary can specify the path's
     * library ({"library": "name_of_the_library"}), special compile
     * flags({"flags": ["flag_1", "flag_2"]}) or both.
     *
     * Glob patters are also supported here.
     */
  ],

  /*
   * Extra config files to be added to the project (optional, defaults to [])
   * If specificed, must be a list of stings.
   */
    "include": [
        // Includes a path directly

        /*
         * Including a folder is also possible. If the folder constains a file
         * whose name matches the HDL_CHECKER_DEFAULT_PROJECT_FILE environment
         * variable (see below), the file will be used. If the config file does
         * not contain the "sources" key, HDL Checker will search the folder for
         * files.
         *
         * If no such file is found, the path is searched for sources (which
         * includes subfolders)
         */
    ],

  /*
   * Language / scope specific info (optional, defaults to {}). Setting these,
   * event if empty, will override values defined per compiler. Flags should be
   * specified as a list of strings.
   *
   * The scope keys are:
   *   - "single": flags used to build the file being checked
   *   - "dependencies": flags used to build the dependencies of the file being
   *     checked
   *   - "global": flags used on both target and its dependencies
   *
   * For example, suppose the compilation sequence for a given source S is A, B,
   * C and then S. The tool will compile A, B and C using global and dependencies
   * flags, while S will be compiled using global and single flags.
   */
  "vhdl": {
    "flags": {
      "single": ["flag_1", "flag_2"],
      "dependencies": [],
      "global": []
    }
  },

  "verilog": {
    "flags": {
      "single": [],
      "dependencies": [],
      "global": []
    }
  },
  "systemverilog": {
    "flags": {
      "single": [],
      "dependencies": [],
      "global": []
    }
  }
}
