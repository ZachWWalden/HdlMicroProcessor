$date
	Sat Apr  2 19:34:41 2022
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module datapath $end
$scope module decode_stage $end
$scope module inst_decoder $end
$var wire 32 ! instruction [31:0] $end
$var reg 1 " call_stack_enable $end
$var reg 2 # ex_mem_data_input_sel [1:0] $end
$var reg 1 $ frame_buffer_enable $end
$var reg 1 % halt $end
$var reg 1 & id_ex_data_input_sel $end
$var reg 1 ' illegal_opcode_exception $end
$var reg 1 ( main_memory_enable $end
$var reg 7 ) mem_ptr_ctl [6:0] $end
$var reg 1 * mem_wen $end
$var reg 1 + prog_mem_enable $end
$var reg 2 , reg_file_ren [1:0] $end
$var reg 2 - reg_file_wen [1:0] $end
$var reg 1 . return_in_pipeline $end
$var reg 2 / sfr_wren [1:0] $end
$var reg 1 0 stall_fetch $end
$upscope $end
$upscope $end
$upscope $end
$scope module datapath $end
$scope module execute_stage $end
$scope module alu $end
$var wire 3 1 alu_flags [2:0] $end
$var wire 2 2 alu_operation [1:0] $end
$var wire 1 3 alu_operation_select $end
$var wire 16 4 alu_out [15:0] $end
$var wire 1 5 clock $end
$var wire 4 6 fu_oe [3:0] $end
$var wire 1 7 nreset $end
$var wire 8 8 top_operand [7:0] $end
$var wire 8 9 bottom_operand [7:0] $end
$scope module add_unit $end
$var wire 1 3 add_sub $end
$var wire 1 5 clock $end
$var wire 3 : flags [2:0] $end
$var wire 1 7 nreset $end
$var wire 1 ; oe $end
$var wire 8 < primary_operand [7:0] $end
$var wire 8 = secondary_operand [7:0] $end
$var wire 8 > result [7:0] $end
$var wire 3 ? flag_result [2:0] $end
$var reg 9 @ value [8:0] $end
$upscope $end
$scope module bitwise $end
$var wire 1 3 and_or $end
$var wire 1 5 clock $end
$var wire 3 A flags [2:0] $end
$var wire 1 7 nreset $end
$var wire 1 B oe $end
$var wire 8 C primary_operand [7:0] $end
$var wire 8 D secondary_operand [7:0] $end
$var wire 8 E result [7:0] $end
$var wire 3 F flags_result [2:0] $end
$var reg 8 G value [7:0] $end
$upscope $end
$scope module multiply_unit $end
$var wire 1 5 clock $end
$var wire 3 H flags [2:0] $end
$var wire 16 I mult_out [15:0] $end
$var wire 1 7 nreset $end
$var wire 1 J oe $end
$var wire 8 K primary_operand [7:0] $end
$var wire 8 L secondary_operand [7:0] $end
$var wire 3 M flags_result [2:0] $end
$var reg 16 N result [15:0] $end
$upscope $end
$scope module shifter $end
$var wire 1 5 clock $end
$var wire 3 O flags [2:0] $end
$var wire 1 7 nreset $end
$var wire 1 P oe $end
$var wire 8 Q primary_operand [7:0] $end
$var wire 1 3 right_left $end
$var wire 8 R result [7:0] $end
$var wire 3 S flags_value [2:0] $end
$var reg 8 T value [7:0] $end
$var integer 32 U Index [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module datapath $end
$scope module execute_stage $end
$var wire 3 V alu_flags_out [2:0] $end
$var wire 16 W alu_out [15:0] $end
$var wire 1 5 clock $end
$var wire 8 X data_in_bot [7:0] $end
$var wire 8 Y data_in_top [7:0] $end
$var wire 8 Z ex_mem_data_bot [7:0] $end
$var wire 8 [ ex_mem_data_top [7:0] $end
$var wire 32 \ ex_mem_operation [31:0] $end
$var wire 3 ] flags_out [2:0] $end
$var wire 8 ^ mem_wb_data_bot [7:0] $end
$var wire 8 _ mem_wb_data_top [7:0] $end
$var wire 1 7 nreset $end
$var wire 5 ` sfr_input_sel [4:0] $end
$var wire 32 a mem_wb_operation [31:0] $end
$var wire 4 b mem_wb_data_sel_top [3:0] $end
$var wire 7 c mem_wb_data_sel_bot [6:0] $end
$var wire 5 d mem_str_data_sel_top [4:0] $end
$var wire 5 e mem_str_data_sel_bot [4:0] $end
$var wire 32 f instruction [31:0] $end
$var wire 2 g ex_mem_data_input_sel [1:0] $end
$var wire 8 h data_out_top [7:0] $end
$var wire 8 i data_out_bot [7:0] $end
$var wire 3 j cur_flags [2:0] $end
$var wire 5 k alu_top_sel [4:0] $end
$var wire 8 l alu_data_top_inv [7:0] $end
$var wire 8 m alu_data_in_top [7:0] $end
$var wire 8 n alu_data_in_bot [7:0] $end
$var wire 5 o alu_bot_sel [4:0] $end
$scope module alu $end
$scope module add_unit $end
$upscope $end
$scope module bitwise $end
$upscope $end
$scope module multiply_unit $end
$upscope $end
$scope module shifter $end
$upscope $end
$upscope $end
$scope module alu_mux $end
$var wire 8 p ex_mem_bot [7:0] $end
$var wire 8 q ex_mem_top [7:0] $end
$var wire 8 r id_ex_data_bot [7:0] $end
$var wire 8 s id_ex_data_top [7:0] $end
$var wire 8 t mem_wb_bot [7:0] $end
$var wire 8 u mem_wb_top [7:0] $end
$var wire 5 v alu_input_sel_top [4:0] $end
$var wire 5 w alu_input_sel_bot [4:0] $end
$var reg 8 x alu_data_input_bot [7:0] $end
$var reg 8 y alu_data_input_top [7:0] $end
$upscope $end
$scope module ex_mem_input_mux $end
$var wire 8 z alu_res_bot [7:0] $end
$var wire 8 { alu_res_top [7:0] $end
$var wire 8 | id_ex_bot [7:0] $end
$var wire 8 } id_ex_top [7:0] $end
$var wire 2 ~ sel_signals [1:0] $end
$var reg 8 !" ex_data_out_bot [7:0] $end
$var reg 8 "" ex_data_out_top [7:0] $end
$upscope $end
$scope module flags_reg $end
$var wire 1 5 clock $end
$var wire 3 #" new_flags [2:0] $end
$var wire 1 7 nreset $end
$var reg 3 $" cur_flags [2:0] $end
$upscope $end
$scope module mem_frwd $end
$var wire 32 %" ex_mem_instruction [31:0] $end
$var wire 32 &" mem_wb_instruction [31:0] $end
$var wire 32 '" instruction [31:0] $end
$var reg 7 (" mem_wb_data_sel_bot [6:0] $end
$var reg 4 )" mem_wb_data_sel_top [3:0] $end
$var reg 5 *" mem_write_data_sel_bot [4:0] $end
$var reg 5 +" mem_write_data_sel_top [4:0] $end
$var reg 5 ," sfr_input_sel [4:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx ,"
bx +"
bx *"
bx )"
bx ("
b0 '"
bx &"
b0 %"
b0 $"
b1 #"
b0 ""
b0 !"
b0 ~
b0 }
b0 |
b0 {
b0 z
bx y
bx x
b0 w
b0 v
bx u
bx t
b0 s
b0 r
b0 q
b0 p
b0 o
bx n
bx m
bx l
b0 k
b0 j
b0 i
b0 h
b0 g
b0 f
bx e
bx d
bx c
bx b
bx a
bx `
bx _
bx ^
b1 ]
b0 \
b0 [
b0 Z
b0 Y
b0 X
b0 W
b1 V
bx U
b0 T
bx01 S
bz R
bx Q
0P
b1 O
b0 N
b1 M
bx L
bx K
0J
b0 I
b1 H
b0 G
b1 F
bz E
bx D
bx C
0B
b1 A
b0 @
b1 ?
b0 >
bx =
bx <
1;
b1 :
bx 9
bx 8
z7
b1 6
z5
b0 4
03
b0 2
b1 1
x0
bx /
x.
bx -
bx ,
x+
x*
bx )
x(
x'
x&
x%
x$
bx #
x"
b0 !
$end
#1
