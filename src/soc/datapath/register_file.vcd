$date
	Sat Apr  2 19:32:59 2022
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module datapath $end
$scope module reg_file $end
$var wire 1 ! clock $end
$var wire 16 " data_in [15:0] $end
$var wire 1 # nreset $end
$var wire 10 $ rd_addr [9:0] $end
$var wire 2 % rd_en [1:0] $end
$var wire 10 & wr_addr [9:0] $end
$var wire 2 ' wr_en [1:0] $end
$var wire 16 ( data_out [15:0] $end
$var reg 2 ) rd_en_int [1:0] $end
$var reg 16 * read_data [15:0] $end
$var integer 32 + i [31:0] $end
$upscope $end
$upscope $end
$scope module datapath $end
$scope module decode_stage $end
$scope module inst_decoder $end
$var wire 32 , instruction [31:0] $end
$var reg 1 - call_stack_enable $end
$var reg 2 . ex_mem_data_input_sel [1:0] $end
$var reg 1 / frame_buffer_enable $end
$var reg 1 0 halt $end
$var reg 1 1 id_ex_data_input_sel $end
$var reg 1 2 illegal_opcode_exception $end
$var reg 1 3 main_memory_enable $end
$var reg 7 4 mem_ptr_ctl [6:0] $end
$var reg 1 5 mem_wen $end
$var reg 1 6 prog_mem_enable $end
$var reg 2 7 reg_file_ren [1:0] $end
$var reg 2 8 reg_file_wen [1:0] $end
$var reg 1 9 return_in_pipeline $end
$var reg 2 : sfr_wren [1:0] $end
$var reg 1 ; stall_fetch $end
$upscope $end
$upscope $end
$upscope $end
$scope module datapath $end
$scope module execute_stage $end
$scope module alu $end
$var wire 3 < alu_flags [2:0] $end
$var wire 2 = alu_operation [1:0] $end
$var wire 1 > alu_operation_select $end
$var wire 16 ? alu_out [15:0] $end
$var wire 1 ! clock $end
$var wire 4 @ fu_oe [3:0] $end
$var wire 1 # nreset $end
$var wire 8 A top_operand [7:0] $end
$var wire 8 B bottom_operand [7:0] $end
$scope module add_unit $end
$var wire 1 > add_sub $end
$var wire 1 ! clock $end
$var wire 3 C flags [2:0] $end
$var wire 1 # nreset $end
$var wire 1 D oe $end
$var wire 8 E primary_operand [7:0] $end
$var wire 8 F secondary_operand [7:0] $end
$var wire 8 G result [7:0] $end
$var wire 3 H flag_result [2:0] $end
$var reg 9 I value [8:0] $end
$upscope $end
$scope module bitwise $end
$var wire 1 > and_or $end
$var wire 1 ! clock $end
$var wire 3 J flags [2:0] $end
$var wire 1 # nreset $end
$var wire 1 K oe $end
$var wire 8 L primary_operand [7:0] $end
$var wire 8 M secondary_operand [7:0] $end
$var wire 8 N result [7:0] $end
$var wire 3 O flags_result [2:0] $end
$var reg 8 P value [7:0] $end
$upscope $end
$scope module multiply_unit $end
$var wire 1 ! clock $end
$var wire 3 Q flags [2:0] $end
$var wire 16 R mult_out [15:0] $end
$var wire 1 # nreset $end
$var wire 1 S oe $end
$var wire 8 T primary_operand [7:0] $end
$var wire 8 U secondary_operand [7:0] $end
$var wire 3 V flags_result [2:0] $end
$var reg 16 W result [15:0] $end
$upscope $end
$scope module shifter $end
$var wire 1 ! clock $end
$var wire 3 X flags [2:0] $end
$var wire 1 # nreset $end
$var wire 1 Y oe $end
$var wire 8 Z primary_operand [7:0] $end
$var wire 1 > right_left $end
$var wire 8 [ result [7:0] $end
$var wire 3 \ flags_value [2:0] $end
$var reg 8 ] value [7:0] $end
$var integer 32 ^ Index [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module datapath $end
$scope module execute_stage $end
$var wire 3 _ alu_flags_out [2:0] $end
$var wire 16 ` alu_out [15:0] $end
$var wire 1 ! clock $end
$var wire 8 a data_in_bot [7:0] $end
$var wire 8 b data_in_top [7:0] $end
$var wire 8 c ex_mem_data_bot [7:0] $end
$var wire 8 d ex_mem_data_top [7:0] $end
$var wire 32 e ex_mem_operation [31:0] $end
$var wire 3 f flags_out [2:0] $end
$var wire 8 g mem_wb_data_bot [7:0] $end
$var wire 8 h mem_wb_data_top [7:0] $end
$var wire 1 # nreset $end
$var wire 5 i sfr_input_sel [4:0] $end
$var wire 32 j mem_wb_operation [31:0] $end
$var wire 4 k mem_wb_data_sel_top [3:0] $end
$var wire 7 l mem_wb_data_sel_bot [6:0] $end
$var wire 5 m mem_str_data_sel_top [4:0] $end
$var wire 5 n mem_str_data_sel_bot [4:0] $end
$var wire 32 o instruction [31:0] $end
$var wire 2 p ex_mem_data_input_sel [1:0] $end
$var wire 8 q data_out_top [7:0] $end
$var wire 8 r data_out_bot [7:0] $end
$var wire 3 s cur_flags [2:0] $end
$var wire 5 t alu_top_sel [4:0] $end
$var wire 8 u alu_data_top_inv [7:0] $end
$var wire 8 v alu_data_in_top [7:0] $end
$var wire 8 w alu_data_in_bot [7:0] $end
$var wire 5 x alu_bot_sel [4:0] $end
$scope module alu $end
$scope module add_unit $end
$upscope $end
$scope module bitwise $end
$upscope $end
$scope module multiply_unit $end
$upscope $end
$scope module shifter $end
$upscope $end
$upscope $end
$scope module alu_mux $end
$var wire 8 y ex_mem_bot [7:0] $end
$var wire 8 z ex_mem_top [7:0] $end
$var wire 8 { id_ex_data_bot [7:0] $end
$var wire 8 | id_ex_data_top [7:0] $end
$var wire 8 } mem_wb_bot [7:0] $end
$var wire 8 ~ mem_wb_top [7:0] $end
$var wire 5 !" alu_input_sel_top [4:0] $end
$var wire 5 "" alu_input_sel_bot [4:0] $end
$var reg 8 #" alu_data_input_bot [7:0] $end
$var reg 8 $" alu_data_input_top [7:0] $end
$upscope $end
$scope module ex_mem_input_mux $end
$var wire 8 %" alu_res_bot [7:0] $end
$var wire 8 &" alu_res_top [7:0] $end
$var wire 8 '" id_ex_bot [7:0] $end
$var wire 8 (" id_ex_top [7:0] $end
$var wire 2 )" sel_signals [1:0] $end
$var reg 8 *" ex_data_out_bot [7:0] $end
$var reg 8 +" ex_data_out_top [7:0] $end
$upscope $end
$scope module flags_reg $end
$var wire 1 ! clock $end
$var wire 3 ," new_flags [2:0] $end
$var wire 1 # nreset $end
$var reg 3 -" cur_flags [2:0] $end
$upscope $end
$scope module mem_frwd $end
$var wire 32 ." ex_mem_instruction [31:0] $end
$var wire 32 /" mem_wb_instruction [31:0] $end
$var wire 32 0" instruction [31:0] $end
$var reg 7 1" mem_wb_data_sel_bot [6:0] $end
$var reg 4 2" mem_wb_data_sel_top [3:0] $end
$var reg 5 3" mem_write_data_sel_bot [4:0] $end
$var reg 5 4" mem_write_data_sel_top [4:0] $end
$var reg 5 5" sfr_input_sel [4:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx 5"
bx 4"
bx 3"
bx 2"
bx 1"
b0 0"
bx /"
b0 ."
b0 -"
b1 ,"
b0 +"
b0 *"
b0 )"
b0 ("
b0 '"
b0 &"
b0 %"
bx $"
bx #"
b0 ""
b0 !"
bx ~
bx }
b0 |
b0 {
b0 z
b0 y
b0 x
bx w
bx v
bx u
b0 t
b0 s
b0 r
b0 q
b0 p
b0 o
bx n
bx m
bx l
bx k
bx j
bx i
bx h
bx g
b1 f
b0 e
b0 d
b0 c
b0 b
b0 a
b0 `
b1 _
bx ^
b0 ]
bx01 \
bz [
bx Z
0Y
b1 X
b0 W
b1 V
bx U
bx T
0S
b0 R
b1 Q
b0 P
b1 O
bz N
bx M
bx L
0K
b1 J
b0 I
b1 H
b0 G
bx F
bx E
1D
b1 C
bx B
bx A
b1 @
b0 ?
0>
b0 =
b1 <
x;
bx :
x9
bx 8
bx 7
x6
x5
bx 4
x3
x2
x1
x0
x/
bx .
x-
b0 ,
b100000 +
b0 *
b0 )
b0 (
bx '
bx &
bx %
b0 $
z#
bx "
z!
$end
#1
