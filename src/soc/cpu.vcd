$date
	Tue Apr 12 21:28:40 2022
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module cpu $end
$var wire 14 ! call_stk_dout [13:0] $end
$var wire 1 " clock $end
$var wire 12 # fb_douta [11:0] $end
$var wire 8 $ main_mem_dout [7:0] $end
$var wire 1 % nreset $end
$var wire 32 & prog_mem_douta [31:0] $end
$var wire 8 ' prog_mem_doutb [7:0] $end
$var wire 32 ( sfr_input [31:0] $end
$var wire 1 ) vblank_int $end
$var wire 1 * take_branch_target $end
$var wire 1 + stall_fetch $end
$var wire 1 , stall_decode $end
$var wire 144 - sfr_output [143:0] $end
$var wire 1 . ret $end
$var wire 1 / prog_mem_en $end
$var wire 14 0 prog_mem_addra [13:0] $end
$var wire 4 1 prog_cntr_load_sel [3:0] $end
$var wire 1 2 mem_wen $end
$var wire 1 3 main_mem_wen $end
$var wire 1 4 main_mem_en $end
$var wire 14 5 interrupt_vector_address [13:0] $end
$var wire 1 6 interrupt $end
$var wire 1 7 inst_word_sel $end
$var wire 1 8 illegal_opcode_exception $end
$var wire 14 9 hazard_int_addr [13:0] $end
$var wire 32 : hazard_instruction [31:0] $end
$var wire 4 ; hazard_control_unit_state [3:0] $end
$var wire 1 < halt $end
$var wire 1 = fetch_stl_req $end
$var wire 1 > fb_wena $end
$var wire 1 ? fb_en $end
$var wire 1 @ dec_stl_req $end
$var wire 12 A data_out [11:0] $end
$var wire 12 B data_in [11:0] $end
$var wire 1 C call_stk_wen $end
$var wire 1 D call_stk_en $end
$var wire 14 E call_stk_din [13:0] $end
$var wire 8 F call_stk_addr [7:0] $end
$var wire 16 G addr_in [15:0] $end
$scope module hazard_unit $end
$var wire 1 " clock $end
$var wire 4 H control_state [3:0] $end
$var wire 1 % nreset $end
$var wire 1 * take_branch_target $end
$var wire 1 . ret $end
$var wire 14 I interrupt_vector_address [13:0] $end
$var wire 1 6 interrupt $end
$var wire 1 < halt $end
$var wire 1 = fetch_stl_req $end
$var wire 1 @ dec_stl_req $end
$var reg 1 7 inst_word_sel $end
$var reg 32 J new_inst_word [31:0] $end
$var reg 4 K next_state [3:0] $end
$var reg 14 L prog_cntr_int_addr [13:0] $end
$var reg 4 M prog_cntr_load_sel [3:0] $end
$var reg 1 , stall_decode $end
$var reg 1 + stall_fetch $end
$var reg 4 N state [3:0] $end
$upscope $end
$scope module int_controller $end
$var wire 1 " clock $end
$var wire 4 O hazard_unit_state [3:0] $end
$var wire 1 % nreset $end
$var wire 1 ) vblank_int $end
$var wire 144 P sfr_output [143:0] $end
$var wire 1 8 illegal_opcode_exception $end
$var reg 14 Q int_vec_addr [13:0] $end
$var reg 1 6 interrupt $end
$var reg 1 R ioeint_t $end
$var reg 1 S ioeint_tm1 $end
$var reg 1 T state $end
$var reg 1 U vblankint_t $end
$var reg 1 V vblankint_tm1 $end
$upscope $end
$scope module mem_buffer $end
$var wire 1 C call_stk_wen $end
$var wire 12 W frame_buf_douta [11:0] $end
$var wire 1 > frame_buf_wena $end
$var wire 8 X main_mem_dout [7:0] $end
$var wire 1 3 main_mem_wen $end
$var wire 8 Y prog_mem_doutb [7:0] $end
$var wire 1 / prog_mem_en $end
$var wire 1 2 mem_wen $end
$var wire 1 4 main_mem_en $end
$var wire 1 ? fb_en $end
$var wire 1 D call_stk_en $end
$var reg 12 Z data_out [11:0] $end
$upscope $end
$scope module pipeline $end
$var wire 14 [ call_stk_read_data [13:0] $end
$var wire 1 " clock $end
$var wire 32 \ hazard_inst_word [31:0] $end
$var wire 4 ] hazard_prog_cntr_sel [3:0] $end
$var wire 32 ^ ifid_instruction_out [31:0] $end
$var wire 1 7 inst_word_sel $end
$var wire 32 _ mem_fetch_instruction [31:0] $end
$var wire 16 ` memwb_data [15:0] $end
$var wire 1 % nreset $end
$var wire 14 a prog_cntr_int_addr [13:0] $end
$var wire 12 b read_data [11:0] $end
$var wire 16 c reg_file_wr_data [15:0] $end
$var wire 32 d sfr_file_in [31:0] $end
$var wire 1 , stall_decode $end
$var wire 1 + stall_fetch $end
$var wire 12 e write_data [11:0] $end
$var wire 1 * take_branch_target $end
$var wire 1 = stall_fetch_req $end
$var wire 1 @ stall_decode_req $end
$var wire 2 f sfr_wren_idex [1:0] $end
$var wire 2 g sfr_wren_exmem [1:0] $end
$var wire 2 h sfr_wren_dec [1:0] $end
$var wire 5 i sfr_input_sel_exmem [4:0] $end
$var wire 5 j sfr_input_sel_ex [4:0] $end
$var wire 144 k sfr_file_out [143:0] $end
$var wire 1 . return_in_pipeline $end
$var wire 14 l ret_addr_wb [13:0] $end
$var wire 14 m ret_addr_idex [13:0] $end
$var wire 10 n reg_file_wr_addr [9:0] $end
$var wire 2 o reg_file_wen_idex [1:0] $end
$var wire 2 p reg_file_wen_exmem [1:0] $end
$var wire 2 q reg_file_wen_dec [1:0] $end
$var wire 2 r reg_file_wen [1:0] $end
$var wire 2 s reg_file_ren [1:0] $end
$var wire 16 t reg_file_rd_data [15:0] $end
$var wire 10 u reg_file_rd_addr [9:0] $end
$var wire 1 v prog_mem_en_idex $end
$var wire 1 w prog_mem_en_dec $end
$var wire 1 / prog_mem_en $end
$var wire 14 x prog_cntr_val [13:0] $end
$var wire 16 y memory_data_out [15:0] $end
$var wire 1 z mem_wen_id_ex $end
$var wire 1 { mem_wen_decode $end
$var wire 1 2 mem_wen $end
$var wire 16 | mem_wb_tm1_data_out [15:0] $end
$var wire 32 } mem_wb_instruction_out [31:0] $end
$var wire 4 ~ mem_wb_data_sel_top_exmem [3:0] $end
$var wire 4 !" mem_wb_data_sel_top_ex [3:0] $end
$var wire 7 "" mem_wb_data_sel_bot_exmem [6:0] $end
$var wire 7 #" mem_wb_data_sel_bot_ex [6:0] $end
$var wire 16 $" mem_wb_data_out [15:0] $end
$var wire 5 %" mem_str_data_sel_top_exmem [4:0] $end
$var wire 5 &" mem_str_data_sel_top_ex [4:0] $end
$var wire 5 '" mem_str_data_sel_bot_exmem [4:0] $end
$var wire 5 (" mem_str_data_sel_bot_ex [4:0] $end
$var wire 7 )" mem_ptr_ctl_idex [6:0] $end
$var wire 7 *" mem_ptr_ctl_exmem [6:0] $end
$var wire 7 +" mem_ptr_ctl_dec [6:0] $end
$var wire 16 ," mem_addr [15:0] $end
$var wire 1 -" main_mem_en_idex $end
$var wire 1 ." main_mem_en_dec $end
$var wire 1 4 main_mem_en $end
$var wire 1 8 illegal_opcode_exception $end
$var wire 14 /" if_id_ret_addr [13:0] $end
$var wire 32 0" if_id_inst_out [31:0] $end
$var wire 32 1" if_id_inst [31:0] $end
$var wire 32 2" id_ex_instruction_out [31:0] $end
$var wire 16 3" id_ex_data_out [15:0] $end
$var wire 16 4" id_ex_data [15:0] $end
$var wire 1 < halt $end
$var wire 14 5" fetch_return_address [13:0] $end
$var wire 1 6" fb_en_idex $end
$var wire 1 7" fb_en_dec $end
$var wire 1 ? fb_en $end
$var wire 16 8" execute_data_out [15:0] $end
$var wire 32 9" ex_mem_instruction_out [31:0] $end
$var wire 16 :" ex_mem_data_out [15:0] $end
$var wire 2 ;" ex_mem_data_input_sel_idex [1:0] $end
$var wire 2 <" ex_mem_data_input_sel_dec [1:0] $end
$var wire 14 =" call_stk_write_data [13:0] $end
$var wire 1 >" call_stk_en_idex $end
$var wire 1 ?" call_stk_en_dec $end
$var wire 1 D call_stk_en $end
$var wire 8 @" call_stk_addr [7:0] $end
$var wire 5 A" alu_top_sel_out [4:0] $end
$var wire 5 B" alu_top_sel [4:0] $end
$var wire 3 C" alu_flags [2:0] $end
$var wire 5 D" alu_bot_sel_out [4:0] $end
$var wire 5 E" alu_bot_sel [4:0] $end
$scope module decode_stage $end
$var wire 1 " clock $end
$var wire 1 % nreset $end
$var wire 8 F" reg_file_data_bot [7:0] $end
$var wire 8 G" reg_file_data_top [7:0] $end
$var wire 1 * take_branch_target $end
$var wire 1 = stall_fetch $end
$var wire 1 @ stall_decode $end
$var wire 2 H" sfr_file_wren [1:0] $end
$var wire 1 . return_in_pipeline $end
$var wire 2 I" reg_file_wen [1:0] $end
$var wire 2 J" reg_file_ren [1:0] $end
$var wire 1 w prog_mem_en $end
$var wire 1 { mem_wen $end
$var wire 7 K" mem_ptr_ctl [6:0] $end
$var wire 1 ." main_memory_en $end
$var wire 32 L" instruction_word [31:0] $end
$var wire 1 8 illegal_opcode_exception $end
$var wire 1 M" idex_data_sel $end
$var wire 32 N" id_ex_instruction [31:0] $end
$var wire 8 O" id_ex_data_top [7:0] $end
$var wire 8 P" id_ex_data_bot [7:0] $end
$var wire 1 < halt $end
$var wire 1 7" fb_en $end
$var wire 32 Q" ex_mem_instruction [31:0] $end
$var wire 2 R" ex_mem_data_input_sel [1:0] $end
$var wire 1 ?" call_stack_en $end
$var wire 5 S" alu_top_sel [4:0] $end
$var wire 3 T" alu_flags [2:0] $end
$var wire 5 U" alu_bot_sel [4:0] $end
$scope module branch_resolver $end
$var wire 32 V" operation [31:0] $end
$var wire 3 W" flags [2:0] $end
$var reg 1 * take_branch_target $end
$upscope $end
$scope module forward_alu $end
$var wire 32 X" instruction [31:0] $end
$var wire 32 Y" id_ex_instruction [31:0] $end
$var wire 32 Z" ex_mem_instruction [31:0] $end
$var reg 5 [" alu_bot_sel [4:0] $end
$var reg 5 \" alu_top_sel [4:0] $end
$var reg 1 @ stall_decode $end
$upscope $end
$scope module id_ex_mux $end
$var wire 8 ]" id_ex_data_input_top [7:0] $end
$var wire 8 ^" immeadiate_data [7:0] $end
$var wire 8 _" reg_file_bot [7:0] $end
$var wire 8 `" reg_file_top [7:0] $end
$var wire 1 M" sel_signal $end
$var reg 8 a" id_ex_data_input_bot [7:0] $end
$upscope $end
$scope module inst_decoder $end
$var wire 32 b" instruction [31:0] $end
$var reg 1 ?" call_stack_enable $end
$var reg 2 c" ex_mem_data_input_sel [1:0] $end
$var reg 1 7" frame_buffer_enable $end
$var reg 1 < halt $end
$var reg 1 M" id_ex_data_input_sel $end
$var reg 1 8 illegal_opcode_exception $end
$var reg 1 ." main_memory_enable $end
$var reg 7 d" mem_ptr_ctl [6:0] $end
$var reg 1 { mem_wen $end
$var reg 1 w prog_mem_enable $end
$var reg 2 e" reg_file_ren [1:0] $end
$var reg 2 f" reg_file_wen [1:0] $end
$var reg 1 . return_in_pipeline $end
$var reg 2 g" sfr_wren [1:0] $end
$var reg 1 = stall_fetch $end
$upscope $end
$upscope $end
$scope module ex_mem_register $end
$var wire 1 " clock $end
$var wire 8 h" data_bot_in [7:0] $end
$var wire 8 i" data_top_in [7:0] $end
$var wire 1 % nreset $end
$var wire 2 j" sfr_file_wren_in [1:0] $end
$var wire 5 k" sfr_file_input_sel_in [4:0] $end
$var wire 2 l" reg_file_wen_in [1:0] $end
$var wire 1 v prog_mem_enable_in $end
$var wire 1 z mem_wen_in $end
$var wire 4 m" mem_wb_data_sel_top_in [3:0] $end
$var wire 7 n" mem_wb_data_sel_bot_in [6:0] $end
$var wire 5 o" mem_str_data_sel_top_in [4:0] $end
$var wire 5 p" mem_str_data_sel_bot_in [4:0] $end
$var wire 7 q" mem_ptr_ctl_in [6:0] $end
$var wire 1 -" main_memory_enable_in $end
$var wire 32 r" instruction_in [31:0] $end
$var wire 1 6" frame_buffer_enable_in $end
$var wire 1 >" call_stack_enable_in $end
$var wire 14 s" call_addr_in [13:0] $end
$var reg 14 t" call_addr_out [13:0] $end
$var reg 1 D call_stack_enable_out $end
$var reg 8 u" data_bot_out [7:0] $end
$var reg 8 v" data_top_out [7:0] $end
$var reg 1 ? frame_buffer_enable_out $end
$var reg 32 w" instruction_out [31:0] $end
$var reg 1 4 main_memory_enable_out $end
$var reg 7 x" mem_ptr_ctl_out [6:0] $end
$var reg 5 y" mem_str_data_sel_bot_out [4:0] $end
$var reg 5 z" mem_str_data_sel_top_out [4:0] $end
$var reg 7 {" mem_wb_data_sel_bot_out [6:0] $end
$var reg 4 |" mem_wb_data_sel_top_out [3:0] $end
$var reg 1 2 mem_wen_out $end
$var reg 1 / prog_mem_enable_out $end
$var reg 2 }" reg_file_wen_out [1:0] $end
$var reg 5 ~" sfr_file_input_sel_out [4:0] $end
$var reg 2 !# sfr_file_wren_out [1:0] $end
$upscope $end
$scope module execute_stage $end
$var wire 3 "# alu_flags_out [2:0] $end
$var wire 16 ## alu_out [15:0] $end
$var wire 1 " clock $end
$var wire 8 $# data_in_bot [7:0] $end
$var wire 8 %# data_in_top [7:0] $end
$var wire 8 &# ex_mem_data_bot [7:0] $end
$var wire 8 '# ex_mem_data_top [7:0] $end
$var wire 32 (# ex_mem_operation [31:0] $end
$var wire 3 )# flags_out [2:0] $end
$var wire 8 *# mem_wb_data_bot [7:0] $end
$var wire 8 +# mem_wb_data_top [7:0] $end
$var wire 1 % nreset $end
$var wire 5 ,# sfr_input_sel [4:0] $end
$var wire 32 -# mem_wb_operation [31:0] $end
$var wire 4 .# mem_wb_data_sel_top [3:0] $end
$var wire 7 /# mem_wb_data_sel_bot [6:0] $end
$var wire 5 0# mem_str_data_sel_top [4:0] $end
$var wire 5 1# mem_str_data_sel_bot [4:0] $end
$var wire 32 2# instruction [31:0] $end
$var wire 2 3# ex_mem_data_input_sel [1:0] $end
$var wire 8 4# data_out_top [7:0] $end
$var wire 8 5# data_out_bot [7:0] $end
$var wire 3 6# cur_flags [2:0] $end
$var wire 5 7# alu_top_sel [4:0] $end
$var wire 8 8# alu_data_top_inv [7:0] $end
$var wire 8 9# alu_data_in_top [7:0] $end
$var wire 8 :# alu_data_in_bot [7:0] $end
$var wire 5 ;# alu_bot_sel [4:0] $end
$scope module alu $end
$var wire 3 <# alu_flags [2:0] $end
$var wire 2 =# alu_operation [1:0] $end
$var wire 1 ># alu_operation_select $end
$var wire 16 ?# alu_out [15:0] $end
$var wire 1 " clock $end
$var wire 4 @# fu_oe [3:0] $end
$var wire 1 % nreset $end
$var wire 8 A# top_operand [7:0] $end
$var wire 8 B# bottom_operand [7:0] $end
$scope module add_unit $end
$var wire 1 ># add_sub $end
$var wire 1 " clock $end
$var wire 3 C# flags [2:0] $end
$var wire 1 % nreset $end
$var wire 1 D# oe $end
$var wire 8 E# primary_operand [7:0] $end
$var wire 8 F# secondary_operand [7:0] $end
$var wire 8 G# result [7:0] $end
$var wire 3 H# flag_result [2:0] $end
$var reg 9 I# value [8:0] $end
$upscope $end
$scope module bitwise $end
$var wire 1 ># and_or $end
$var wire 1 " clock $end
$var wire 3 J# flags [2:0] $end
$var wire 1 % nreset $end
$var wire 1 K# oe $end
$var wire 8 L# primary_operand [7:0] $end
$var wire 8 M# secondary_operand [7:0] $end
$var wire 8 N# result [7:0] $end
$var wire 3 O# flags_result [2:0] $end
$var reg 8 P# value [7:0] $end
$upscope $end
$scope module multiply_unit $end
$var wire 1 " clock $end
$var wire 3 Q# flags [2:0] $end
$var wire 16 R# mult_out [15:0] $end
$var wire 1 % nreset $end
$var wire 1 S# oe $end
$var wire 8 T# primary_operand [7:0] $end
$var wire 8 U# secondary_operand [7:0] $end
$var wire 3 V# flags_result [2:0] $end
$var reg 16 W# result [15:0] $end
$upscope $end
$scope module shifter $end
$var wire 1 " clock $end
$var wire 3 X# flags [2:0] $end
$var wire 1 % nreset $end
$var wire 1 Y# oe $end
$var wire 8 Z# primary_operand [7:0] $end
$var wire 1 ># right_left $end
$var wire 8 [# result [7:0] $end
$var wire 3 \# flags_value [2:0] $end
$var reg 8 ]# value [7:0] $end
$var integer 32 ^# Index [31:0] $end
$upscope $end
$upscope $end
$scope module alu_mux $end
$var wire 8 _# ex_mem_bot [7:0] $end
$var wire 8 `# ex_mem_top [7:0] $end
$var wire 8 a# id_ex_data_bot [7:0] $end
$var wire 8 b# id_ex_data_top [7:0] $end
$var wire 8 c# mem_wb_bot [7:0] $end
$var wire 8 d# mem_wb_top [7:0] $end
$var wire 5 e# alu_input_sel_top [4:0] $end
$var wire 5 f# alu_input_sel_bot [4:0] $end
$var reg 8 g# alu_data_input_bot [7:0] $end
$var reg 8 h# alu_data_input_top [7:0] $end
$upscope $end
$scope module ex_mem_input_mux $end
$var wire 8 i# alu_res_bot [7:0] $end
$var wire 8 j# alu_res_top [7:0] $end
$var wire 8 k# id_ex_bot [7:0] $end
$var wire 8 l# id_ex_top [7:0] $end
$var wire 2 m# sel_signals [1:0] $end
$var reg 8 n# ex_data_out_bot [7:0] $end
$var reg 8 o# ex_data_out_top [7:0] $end
$upscope $end
$scope module flags_reg $end
$var wire 1 " clock $end
$var wire 3 p# new_flags [2:0] $end
$var wire 1 % nreset $end
$var reg 3 q# cur_flags [2:0] $end
$upscope $end
$scope module mem_frwd $end
$var wire 32 r# ex_mem_instruction [31:0] $end
$var wire 32 s# mem_wb_instruction [31:0] $end
$var wire 32 t# instruction [31:0] $end
$var reg 7 u# mem_wb_data_sel_bot [6:0] $end
$var reg 4 v# mem_wb_data_sel_top [3:0] $end
$var reg 5 w# mem_write_data_sel_bot [4:0] $end
$var reg 5 x# mem_write_data_sel_top [4:0] $end
$var reg 5 y# sfr_input_sel [4:0] $end
$upscope $end
$upscope $end
$scope module fetch_inst_word_sel_mux $end
$var wire 32 z# hazard_unit_inst_word [31:0] $end
$var wire 32 {# mem_inst_word [31:0] $end
$var wire 1 7 sel $end
$var reg 32 |# inst_word_out [31:0] $end
$upscope $end
$scope module fetch_stage $end
$var wire 14 }# branch_target_address [13:0] $end
$var wire 1 " clock $end
$var wire 14 ~# interrupt_branch_addr [13:0] $end
$var wire 1 % nreset $end
$var wire 4 !$ prog_cntr_input_sel [3:0] $end
$var wire 14 "$ ret_addr_out [13:0] $end
$var wire 1 + stall $end
$var wire 14 #$ ret_addr_mem [13:0] $end
$var wire 14 $$ prog_mem_fetch_read_addr [13:0] $end
$var wire 14 %$ prog_cntr_load_val [13:0] $end
$var wire 14 &$ next_prog_cntr [13:0] $end
$scope module input_mux $end
$var wire 14 '$ branch_target_addr [13:0] $end
$var wire 14 ($ int_branch_addr [13:0] $end
$var wire 4 )$ sel_signals [3:0] $end
$var wire 14 *$ ret_addr [13:0] $end
$var wire 14 +$ next_prog_cntr [13:0] $end
$var reg 14 ,$ prog_cntr_load_val [13:0] $end
$upscope $end
$scope module prog_cntr $end
$var wire 1 " clock $end
$var wire 14 -$ load_value [13:0] $end
$var wire 14 .$ next_prog_cntr [13:0] $end
$var wire 1 % nreset $end
$var wire 14 /$ prog_mem_addr_fetch [13:0] $end
$var wire 1 + stall $end
$var wire 14 0$ next_value [13:0] $end
$var reg 14 1$ value [13:0] $end
$upscope $end
$upscope $end
$scope module id_ex_register $end
$var wire 5 2$ alu_bot_select_in [4:0] $end
$var wire 5 3$ alu_top_select_in [4:0] $end
$var wire 1 ?" call_stack_enable_in $end
$var wire 1 " clock $end
$var wire 2 4$ ex_mem_data_input_sel_in [1:0] $end
$var wire 1 7" frame_buffer_enable_in $end
$var wire 8 5$ id_ex_bot_in [7:0] $end
$var wire 8 6$ id_ex_top_in [7:0] $end
$var wire 1 ." main_memory_enable_in $end
$var wire 7 7$ mem_ptr_ctl_in [6:0] $end
$var wire 1 { mem_wen_in $end
$var wire 1 % nreset $end
$var wire 1 w prog_mem_enable_in $end
$var wire 2 8$ reg_file_wen_in [1:0] $end
$var wire 2 9$ sfr_file_wren_in [1:0] $end
$var wire 1 , stall $end
$var wire 32 :$ instruction_in [31:0] $end
$var wire 14 ;$ call_addr_in [13:0] $end
$var reg 5 <$ alu_bot_select_out [4:0] $end
$var reg 5 =$ alu_top_select_out [4:0] $end
$var reg 14 >$ call_addr_out [13:0] $end
$var reg 1 >" call_stack_enable_out $end
$var reg 2 ?$ ex_mem_data_input_sel_out [1:0] $end
$var reg 1 6" frame_buffer_enable_out $end
$var reg 8 @$ id_ex_bot_out [7:0] $end
$var reg 8 A$ id_ex_top_out [7:0] $end
$var reg 32 B$ instruction_out [31:0] $end
$var reg 1 -" main_memory_enable_out $end
$var reg 7 C$ mem_ptr_ctl_out [6:0] $end
$var reg 7 D$ mem_ptr_ctl_signals [6:0] $end
$var reg 1 z mem_wen_out $end
$var reg 1 v prog_mem_enable_out $end
$var reg 2 E$ reg_file_wen_out [1:0] $end
$var reg 2 F$ sfr_file_wren_out [1:0] $end
$upscope $end
$scope module if_id_register $end
$var wire 1 " clock $end
$var wire 32 G$ instruction_in [31:0] $end
$var wire 1 % nreset $end
$var wire 14 H$ return_addr_in [13:0] $end
$var reg 32 I$ instruction_out [31:0] $end
$var reg 14 J$ return_addr_out [13:0] $end
$upscope $end
$scope module mem_wb_register $end
$var wire 1 " clock $end
$var wire 8 K$ data_bot_in [7:0] $end
$var wire 8 L$ data_top_in [7:0] $end
$var wire 32 M$ instruction_in [31:0] $end
$var wire 1 % nreset $end
$var wire 2 N$ reg_file_wen_in [1:0] $end
$var wire 14 O$ ret_addr_in [13:0] $end
$var reg 8 P$ data_bot_out [7:0] $end
$var reg 8 Q$ data_tm1_bot [7:0] $end
$var reg 8 R$ data_tm1_top [7:0] $end
$var reg 8 S$ data_top_out [7:0] $end
$var reg 32 T$ instruction_out [31:0] $end
$var reg 2 U$ reg_file_wen_out [1:0] $end
$var reg 14 V$ ret_addr_out [13:0] $end
$upscope $end
$scope module memory_stage $end
$var wire 1 " clock $end
$var wire 8 W$ data_in_bot [7:0] $end
$var wire 8 X$ data_in_top [7:0] $end
$var wire 32 Y$ instruction [31:0] $end
$var wire 7 Z$ mem_ptr_ctl [6:0] $end
$var wire 12 [$ mem_read_data [11:0] $end
$var wire 5 \$ mem_str_data_input_sel_bot [4:0] $end
$var wire 5 ]$ mem_str_data_input_sel_top [4:0] $end
$var wire 8 ^$ mem_wb_bot [7:0] $end
$var wire 7 _$ mem_wb_data_input_sel_bot [6:0] $end
$var wire 4 `$ mem_wb_data_input_sel_top [3:0] $end
$var wire 8 a$ mem_wb_tm1_bot [7:0] $end
$var wire 8 b$ mem_wb_tm1_top [7:0] $end
$var wire 8 c$ mem_wb_top [7:0] $end
$var wire 1 % nreset $end
$var wire 32 d$ sfr_file_in [31:0] $end
$var wire 5 e$ sfr_file_input_sel [4:0] $end
$var wire 2 f$ sfr_file_wren [1:0] $end
$var wire 16 g$ z_ptr [15:0] $end
$var wire 16 h$ y_ptr [15:0] $end
$var wire 16 i$ x_ptr [15:0] $end
$var wire 16 j$ stack_ptr [15:0] $end
$var wire 8 k$ sfr_output [7:0] $end
$var wire 8 l$ sfr_input [7:0] $end
$var wire 144 m$ sfr_file_out [143:0] $end
$var wire 12 n$ mem_write_data [11:0] $end
$var wire 8 o$ data_out_top [7:0] $end
$var wire 8 p$ data_out_bot [7:0] $end
$var wire 8 q$ call_stack_ptr [7:0] $end
$var wire 16 r$ address [15:0] $end
$scope module mem_addr_in_mux $end
$var wire 2 s$ sel_signals [1:0] $end
$var wire 16 t$ z_ptr [15:0] $end
$var wire 16 u$ y_ptr [15:0] $end
$var wire 16 v$ x_ptr [15:0] $end
$var wire 16 w$ stack_ptr [15:0] $end
$var reg 16 x$ mem_addr [15:0] $end
$upscope $end
$scope module mem_data_in_mux $end
$var wire 8 y$ ex_mem_data_bot [7:0] $end
$var wire 8 z$ ex_mem_data_top [7:0] $end
$var wire 8 {$ mem_wb_data_bot [7:0] $end
$var wire 8 |$ mem_wb_data_top [7:0] $end
$var wire 8 }$ mem_wb_tm1_data_bot [7:0] $end
$var wire 8 ~$ mem_wb_tm1_data_top [7:0] $end
$var wire 5 !% sel_signal_bot [4:0] $end
$var wire 5 "% sel_signal_top [4:0] $end
$var reg 12 #% mem_data [11:0] $end
$upscope $end
$scope module mem_wb_input_mux $end
$var wire 8 $% ex_mem_data_bot [7:0] $end
$var wire 8 %% ex_mem_data_top [7:0] $end
$var wire 8 &% ld_res_bot [7:0] $end
$var wire 4 '% ld_res_top [3:0] $end
$var wire 8 (% mem_wb_bot [7:0] $end
$var wire 8 )% mem_wb_tm1_bot [7:0] $end
$var wire 8 *% mem_wb_tm1_top [7:0] $end
$var wire 8 +% mem_wb_top [7:0] $end
$var wire 7 ,% sel_signals_bot [6:0] $end
$var wire 4 -% sel_signals_top [3:0] $end
$var wire 8 .% sfr_data [7:0] $end
$var reg 8 /% mem_data_out_bot [7:0] $end
$var reg 8 0% mem_data_out_top [7:0] $end
$upscope $end
$scope module sf_reg_file $end
$var wire 1 " clock $end
$var wire 7 1% mem_ptr_ctl_signals [6:0] $end
$var wire 1 % nreset $end
$var wire 5 2% rd_addr [4:0] $end
$var wire 8 3% read_data [7:0] $end
$var wire 32 4% sfr_file_in [31:0] $end
$var wire 5 5% wr_addr [4:0] $end
$var wire 2 6% wren [1:0] $end
$var wire 16 7% z_intermediate [15:0] $end
$var wire 16 8% z_inc [15:0] $end
$var wire 16 9% y_intermediate [15:0] $end
$var wire 16 :% y_inc [15:0] $end
$var wire 16 ;% x_intermediate [15:0] $end
$var wire 16 <% x_inc [15:0] $end
$var wire 8 =% write_data [7:0] $end
$var wire 16 >% stk_ptr_intermediate [15:0] $end
$var wire 16 ?% stk_ptr_inc [15:0] $end
$var wire 16 @% stk_ptr_dec [15:0] $end
$var wire 144 A% sfr_file_out [143:0] $end
$var wire 8 B% call_stk_inc [7:0] $end
$var wire 8 C% call_stk_dec [7:0] $end
$var reg 8 D% call_stk_ptr [7:0] $end
$var reg 8 E% out_data [7:0] $end
$var reg 16 F% stack_ptr [15:0] $end
$var reg 16 G% x_ptr [15:0] $end
$var reg 16 H% y_ptr [15:0] $end
$var reg 16 I% z_ptr [15:0] $end
$var integer 32 J% i [31:0] $end
$upscope $end
$scope module sfr_in_sel $end
$var wire 8 K% ex_mem_data_bot [7:0] $end
$var wire 8 L% mem_wb_data_bot [7:0] $end
$var wire 8 M% mem_wb_data_top [7:0] $end
$var wire 8 N% mem_wb_tm1_data_bot [7:0] $end
$var wire 8 O% mem_wb_tm1_data_top [7:0] $end
$var wire 5 P% sel_signals [4:0] $end
$var reg 8 Q% sfr_data_input [7:0] $end
$upscope $end
$upscope $end
$scope module reg_file $end
$var wire 1 " clock $end
$var wire 16 R% data_in [15:0] $end
$var wire 1 % nreset $end
$var wire 10 S% rd_addr [9:0] $end
$var wire 2 T% rd_en [1:0] $end
$var wire 10 U% wr_addr [9:0] $end
$var wire 2 V% wr_en [1:0] $end
$var wire 16 W% data_out [15:0] $end
$var reg 2 X% rd_en_int [1:0] $end
$var reg 16 Y% read_data [15:0] $end
$var integer 32 Z% i [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b100000 Z%
b0 Y%
b0 X%
b0 W%
b0 V%
b0 U%
b0 T%
b0 S%
b0 R%
b0 Q%
b0 P%
b0 O%
b0 N%
b0 M%
b0 L%
b0 K%
b100000 J%
b0 I%
b0 H%
b0 G%
b0 F%
b0 E%
b0 D%
b11111111 C%
b1 B%
b0 A%
b1111111111111111 @%
b1 ?%
b0 >%
b0 =%
b1 <%
b0 ;%
b1 :%
b0 9%
b1 8%
b0 7%
b0 6%
b0 5%
bz 4%
b0 3%
b0 2%
b0 1%
b0 0%
b0 /%
b0 .%
b0 -%
b0 ,%
b0 +%
b0 *%
b0 )%
b0 (%
b0 '%
b0 &%
b0 %%
b0 $%
b0 #%
b0 "%
b0 !%
b0 ~$
b0 }$
b0 |$
b0 {$
b0 z$
b0 y$
b0 x$
b0 w$
b0 v$
b0 u$
b0 t$
b0 s$
b0 r$
b0 q$
b0 p$
b0 o$
b0 n$
b0 m$
b0 l$
b0 k$
b0 j$
b0 i$
b0 h$
b0 g$
b0 f$
b0 e$
bz d$
b0 c$
b0 b$
b0 a$
b0 `$
b0 _$
b0 ^$
b0 ]$
b0 \$
b0 [$
b0 Z$
b0 Y$
b0 X$
b0 W$
b0 V$
b0 U$
b0 T$
b0 S$
b0 R$
b0 Q$
b0 P$
bz O$
b0 N$
b0 M$
b0 L$
b0 K$
b0 J$
b0 I$
b1 H$
bz G$
b0 F$
b0 E$
b0 D$
b0 C$
b0 B$
b0 A$
b0 @$
b0 ?$
b0 >$
b0 =$
b0 <$
b0 ;$
b0 :$
b0 9$
b0 8$
b0 7$
b0 6$
b0 5$
b0 4$
b0 3$
b0 2$
b0 1$
b1 0$
b0 /$
b1 .$
b1 -$
b1 ,$
b1 +$
b0 *$
b0 )$
b0 ($
b0 '$
b1 &$
b1 %$
b0 $$
b0 #$
b1 "$
b0 !$
b0 ~#
b0 }#
bz |#
bz {#
b0 z#
b1 y#
b1 x#
b1 w#
b1 v#
b10 u#
b0 t#
b0 s#
b0 r#
b0 q#
b1 p#
b0 o#
b0 n#
b0 m#
b0 l#
b0 k#
b0 j#
b0 i#
b0 h#
b0 g#
b0 f#
b0 e#
b0 d#
b0 c#
b0 b#
b0 a#
b0 `#
b0 _#
bx ^#
b0 ]#
b1 \#
bz [#
b0 Z#
0Y#
b1 X#
b0 W#
b1 V#
b0 U#
b0 T#
0S#
b0 R#
b1 Q#
b0 P#
b1 O#
bz N#
b0 M#
b0 L#
0K#
b1 J#
b0 I#
b1 H#
b0 G#
b0 F#
b0 E#
1D#
b1 C#
b0 B#
b0 A#
b1 @#
b0 ?#
0>#
b0 =#
b1 <#
b0 ;#
b0 :#
b0 9#
b0 8#
b0 7#
b0 6#
b0 5#
b0 4#
b0 3#
b0 2#
b1 1#
b1 0#
b10 /#
b1 .#
b0 -#
b1 ,#
b0 +#
b0 *#
b1 )#
b0 (#
b0 '#
b0 &#
b0 %#
b0 $#
b0 ##
b1 "#
b0 !#
b0 ~"
b0 }"
b0 |"
b0 {"
b0 z"
b0 y"
b0 x"
b0 w"
b0 v"
b0 u"
b0 t"
b0 s"
b0 r"
b0 q"
b1 p"
b1 o"
b10 n"
b1 m"
b0 l"
b1 k"
b0 j"
b0 i"
b0 h"
b0 g"
b0 f"
b0 e"
b0 d"
b0 c"
b0 b"
b0 a"
b0 `"
b0 _"
b0 ^"
b0 ]"
b0 \"
b0 ["
b0 Z"
b0 Y"
b0 X"
b1 W"
b0 V"
b0 U"
b1 T"
b0 S"
b0 R"
b0 Q"
b0 P"
b0 O"
b0 N"
0M"
b0 L"
b0 K"
b0 J"
b0 I"
b0 H"
b0 G"
b0 F"
b0 E"
b0 D"
b1 C"
b0 B"
b0 A"
b0 @"
0?"
0>"
b0 ="
b0 <"
b0 ;"
b0 :"
b0 9"
b0 8"
07"
06"
b1 5"
b0 4"
b0 3"
b0 2"
bz 1"
b0 0"
b0 /"
0."
0-"
b0 ,"
b0 +"
b0 *"
b0 )"
b1 ("
b0 '"
b1 &"
b0 %"
b0 $"
b10 #"
b0 ""
b1 !"
b0 ~
b0 }
b0 |
0{
0z
b0 y
b0 x
0w
0v
b0 u
b0 t
b0 s
b0 r
b0 q
b0 p
b0 o
b0 n
b0 m
b0 l
b0 k
b1 j
b0 i
b0 h
b0 g
b0 f
b0 e
bz d
b0 c
b0 b
b0 a
b0 `
bz _
b0 ^
b0 ]
b0 \
bz [
b0 Z
bz Y
bz X
bz W
0V
0U
0T
0S
0R
b0 Q
b0 P
b0 O
b0 N
b0 M
b0 L
b0 K
b0 J
b0 I
b0 H
b0 G
b0 F
b0 E
0D
0C
b0 B
b0 A
0@
0?
0>
0=
0<
b0 ;
b0 :
b0 9
08
07
06
b0 5
04
03
02
b0 1
b0 0
0/
0.
b0 -
0,
0+
0*
z)
bz (
bz '
bz &
0%
bz $
bz #
1"
bz !
$end
#5000
b11000000010000111000 1"
b11000000010000111000 |#
b11000000010000111000 G$
1%
b11000000010000111000 &
b11000000010000111000 _
b11000000010000111000 {#
b100000 Z%
0"
#10000
b1000 K
b10 1
b10 M
b10 ]
b10 !$
b10 )$
1*
b1 E"
b1 U"
b1 ["
b1 2$
b1 B"
b1 S"
b1 \"
b1 3$
b10 %$
b10 ,$
b10 -$
b100 u
b100 S%
b11 }#
b11 '$
bz l
bz #$
bz *$
bz V$
b1 i
b1 ~"
b1 e$
b1 P%
b1 '"
b1 y"
b1 \$
b1 !%
b1 %"
b1 z"
b1 ]$
b1 "%
b10 ""
b10 {"
b10 _$
b10 ,%
b1 ~
b1 |"
b1 `$
b1 -%
b1 6#
b1 q#
b1 /"
b1 ;$
b1 J$
b11000000010000111000 ^
b11000000010000111000 0"
b11000000010000111000 L"
b11000000010000111000 V"
b11000000010000111000 X"
b11000000010000111000 b"
b11000000010000111000 :$
b11000000010000111000 I$
b10 5"
b10 "$
b10 H$
b10 &$
b10 +$
b10 .$
b10 0$
b1 0
b1 x
b1 $$
b1 /$
b1 1$
b0 ^#
zU
1"
#15000
b111000 '
b111000 Y
b0 !
b0 [
b0 O$
b0 $
b0 X
b0 #
b0 W
b111000000010000111000 &
b111000000010000111000 _
b111000000010000111000 {#
b0 1"
b0 |#
b0 G$
b11 %$
b11 ,$
b11 -$
b0 K
17
b1 1
b1 M
b1 ]
b1 !$
b1 )$
b1000 ;
b1000 H
b1000 O
b1000 N
0"
#20000
b0 %$
b0 ,$
b0 -$
0*
b0 u
b0 S%
b0 }#
b0 '$
1>#
b100 5"
b100 "$
b100 H$
b100 &$
b100 +$
b100 .$
b100 0$
b11 0
b11 x
b11 $$
b11 /$
b11 1$
b10 /"
b10 ;$
b10 J$
b0 ^
b0 0"
b0 L"
b0 V"
b0 X"
b0 b"
b0 :$
b0 I$
b1 m
b1 s"
b1 >$
b11000000010000111000 2"
b11000000010000111000 N"
b11000000010000111000 Y"
b11000000010000111000 r"
b11000000010000111000 2#
b11000000010000111000 t#
b11000000010000111000 B$
b1 D"
b1 ;#
b1 f#
b1 <$
b1 A"
b1 7#
b1 e#
b1 =$
b0 l
b0 #$
b0 *$
b0 V$
zV
b0 ^#
1"
#25000
b11111111001010000000000011111000 &
b11111111001010000000000011111000 _
b11111111001010000000000011111000 {#
b11111111001010000000000011111000 1"
b11111111001010000000000011111000 |#
b11111111001010000000000011111000 G$
b100 %$
b100 ,$
b100 -$
07
b10 1
b10 M
b10 ]
b10 !$
b10 )$
b0 ;
b0 H
b0 O
b0 N
0"
#30000
b11111111 5$
b11111111 4"
b11111111 P"
b11111111 a"
b1 q
b1 I"
b1 f"
b1 8$
1M"
b101 %$
b101 ,$
b101 -$
b100 5%
b11 s$
0>#
b11111111 ^"
b11111111001010 }#
b11111111001010 '$
b1 E
b1 ="
b1 t"
b11000000010000111000 9"
b11000000010000111000 Q"
b11000000010000111000 Z"
b11000000010000111000 w"
b11000000010000111000 (#
b11000000010000111000 r#
b11000000010000111000 M$
b11000000010000111000 Y$
b10 m
b10 s"
b10 >$
b0 2"
b0 N"
b0 Y"
b0 r"
b0 2#
b0 t#
b0 B$
b100 /"
b100 ;$
b100 J$
b11111111001010000000000011111000 ^
b11111111001010000000000011111000 0"
b11111111001010000000000011111000 L"
b11111111001010000000000011111000 V"
b11111111001010000000000011111000 X"
b11111111001010000000000011111000 b"
b11111111001010000000000011111000 :$
b11111111001010000000000011111000 I$
b101 5"
b101 "$
b101 H$
b101 &$
b101 +$
b101 .$
b101 0$
b100 0
b100 x
b100 $$
b100 /$
b100 1$
b110 ^#
1"
#35000
b1001000000000110011100 1"
b1001000000000110011100 |#
b1001000000000110011100 G$
b1001000000000110011100 &
b1001000000000110011100 _
b1001000000000110011100 {#
0"
#40000
b0 5$
b11111111 h"
b0 4"
b0 P"
b0 a"
b11111111 8"
b11111111 5#
b11111111 n#
b110 %$
b110 ,$
b110 -$
0M"
b0 q
b0 I"
b0 f"
b0 8$
b1 h
b1 H"
b1 g"
b1 9$
b10 s
b10 J"
b10 e"
b10 T%
b0 ^"
b1 u
b1 S%
b1001 }#
b1001 '$
b11111111 $#
b11111111 a#
b11111111 k#
b0 5%
b0 s$
b100 n
b100 U%
b110 5"
b110 "$
b110 H$
b110 &$
b110 +$
b110 .$
b110 0$
b101 0
b101 x
b101 $$
b101 /$
b101 1$
b101 /"
b101 ;$
b101 J$
b1001000000000110011100 ^
b1001000000000110011100 0"
b1001000000000110011100 L"
b1001000000000110011100 V"
b1001000000000110011100 X"
b1001000000000110011100 b"
b1001000000000110011100 :$
b1001000000000110011100 I$
b100 m
b100 s"
b100 >$
b1 o
b1 l"
b1 E$
b11111111001010000000000011111000 2"
b11111111001010000000000011111000 N"
b11111111001010000000000011111000 Y"
b11111111001010000000000011111000 r"
b11111111001010000000000011111000 2#
b11111111001010000000000011111000 t#
b11111111001010000000000011111000 B$
b11111111 3"
b11111111 @$
b10 E
b10 ="
b10 t"
b0 9"
b0 Q"
b0 Z"
b0 w"
b0 (#
b0 r#
b0 M$
b0 Y$
b11000000010000111000 }
b11000000010000111000 -#
b11000000010000111000 s#
b11000000010000111000 T$
b0 ^#
1"
#45000
b1001000000000010011100 1"
b1001000000000010011100 |#
b1001000000000010011100 G$
b1001000000000010011100 &
b1001000000000010011100 _
b1001000000000010011100 {#
b10 X%
0"
#50000
b11111111 K$
b0 h"
b11111111 B
b11111111 e
b11111111 n$
b11111111 #%
b11111111 y
b11111111 p$
b11111111 /%
b11111111 l$
b11111111 =%
b11111111 Q%
b0 8"
b0 5#
b0 n#
b100 j
b100 k"
b100 ,#
b100 y#
b111 %$
b111 ,$
b111 -$
b0 n
b0 U%
b10 s$
b11111111 W$
b11111111 y$
b11111111 $%
b11111111 K%
b11111111 &#
b11111111 _#
1>#
b0 $#
b0 a#
b0 k#
b0 u
b0 S%
b0 }
b0 -#
b0 s#
b0 T$
b100 E
b100 ="
b100 t"
b1 p
b1 }"
b1 N$
b11111111001010000000000011111000 9"
b11111111001010000000000011111000 Q"
b11111111001010000000000011111000 Z"
b11111111001010000000000011111000 w"
b11111111001010000000000011111000 (#
b11111111001010000000000011111000 r#
b11111111001010000000000011111000 M$
b11111111001010000000000011111000 Y$
b11111111 :"
b11111111 u"
b101 m
b101 s"
b101 >$
b1 f
b1 j"
b1 F$
b0 o
b0 l"
b0 E$
b1001000000000110011100 2"
b1001000000000110011100 N"
b1001000000000110011100 Y"
b1001000000000110011100 r"
b1001000000000110011100 2#
b1001000000000110011100 t#
b1001000000000110011100 B$
b0 3"
b0 @$
b110 /"
b110 ;$
b110 J$
b1001000000000010011100 ^
b1001000000000010011100 0"
b1001000000000010011100 L"
b1001000000000010011100 V"
b1001000000000010011100 X"
b1001000000000010011100 b"
b1001000000000010011100 :$
b1001000000000010011100 I$
b111 5"
b111 "$
b111 H$
b111 &$
b111 +$
b111 .$
b111 0$
b110 0
b110 x
b110 $$
b110 /$
b110 1$
b0 ^#
1"
#55000
b1010000001000011111000 1"
b1010000001000011111000 |#
b1010000001000011111000 G$
b1010000001000011111000 &
b1010000001000011111000 _
b1010000001000011111000 {#
0"
#60000
b0 K$
b0 B
b0 e
b0 n$
b0 #%
b0 y
b0 p$
b0 /%
b1000 %$
b1000 ,$
b1000 -$
b1 q
b1 I"
b1 f"
b1 8$
b0 h
b0 H"
b0 g"
b0 9$
1M"
b0 s
b0 J"
b0 e"
b0 T%
b1 j
b1 k"
b1 ,#
b1 y#
b10000 u
b10000 S%
b1010 }#
b1010 '$
b1 5%
b1 s$
b0 W$
b0 y$
b0 $%
b0 K%
b0 &#
b0 _#
b11111111 ^$
b11111111 {$
b11111111 (%
b11111111 L%
b11111111 *#
b11111111 c#
b1000 5"
b1000 "$
b1000 H$
b1000 &$
b1000 +$
b1000 .$
b1000 0$
b111 0
b111 x
b111 $$
b111 /$
b111 1$
b111 /"
b111 ;$
b111 J$
b1010000001000011111000 ^
b1010000001000011111000 0"
b1010000001000011111000 L"
b1010000001000011111000 V"
b1010000001000011111000 X"
b1010000001000011111000 b"
b1010000001000011111000 :$
b1010000001000011111000 I$
b110 m
b110 s"
b110 >$
b1001000000000010011100 2"
b1001000000000010011100 N"
b1001000000000010011100 Y"
b1001000000000010011100 r"
b1001000000000010011100 2#
b1001000000000010011100 t#
b1001000000000010011100 B$
b101 E
b101 ="
b101 t"
b0 p
b0 }"
b0 N$
b1 g
b1 !#
b1 f$
b1 6%
b100 i
b100 ~"
b100 e$
b100 P%
b1001000000000110011100 9"
b1001000000000110011100 Q"
b1001000000000110011100 Z"
b1001000000000110011100 w"
b1001000000000110011100 (#
b1001000000000110011100 r#
b1001000000000110011100 M$
b1001000000000110011100 Y$
b0 :"
b0 u"
b1 r
b1 U$
b1 V%
b11111111001010000000000011111000 }
b11111111001010000000000011111000 -#
b11111111001010000000000011111000 s#
b11111111001010000000000011111000 T$
b11111111 `
b11111111 c
b11111111 R%
b11111111 $"
b11111111 P$
b110 ^#
1"
#65000
b1001011000001000010111100 1"
b1001011000001000010111100 |#
b1001011000001000010111100 G$
b1001011000001000010111100 &
b1001011000001000010111100 _
b1001011000001000010111100 {#
b0 X%
b0 G"
b0 `"
b0 t
b0 W%
0"
#70000
b100 K
b1 5$
b1 4"
b1 P"
b1 a"
b0 l$
b0 =%
b0 Q%
1@
b100 B"
b100 S"
b100 \"
b100 3$
b10 <"
b10 R"
b10 c"
b10 4$
b1 s
b1 J"
b1 e"
b1 T%
b1001 %$
b1001 ,$
b1001 -$
b11111111 a$
b11111111 }$
b11111111 )%
b11111111 N%
b1 n
b1 U%
b0 ^$
b0 {$
b0 (%
b0 L%
b0 *#
b0 c#
b0 5%
0>#
b1 ^"
b1001011 }#
b1001011 '$
b11111111 |
b11111111 Q$
b0 r
b0 U$
b0 V%
b1001000000000110011100 }
b1001000000000110011100 -#
b1001000000000110011100 s#
b1001000000000110011100 T$
b0 `
b0 c
b0 R%
b0 $"
b0 P$
b1111111100000001 ?%
b1111111011111111 @%
b1111111100000000 >%
b110 E
b110 ="
b110 t"
b1 i
b1 ~"
b1 e$
b1 P%
b1001000000000010011100 9"
b1001000000000010011100 Q"
b1001000000000010011100 Z"
b1001000000000010011100 w"
b1001000000000010011100 (#
b1001000000000010011100 r#
b1001000000000010011100 M$
b1001000000000010011100 Y$
b111 m
b111 s"
b111 >$
b0 f
b0 j"
b0 F$
b1 o
b1 l"
b1 E$
b1010000001000011111000 2"
b1010000001000011111000 N"
b1010000001000011111000 Y"
b1010000001000011111000 r"
b1010000001000011111000 2#
b1010000001000011111000 t#
b1010000001000011111000 B$
b1000 /"
b1000 ;$
b1000 J$
b1001011000001000010111100 ^
b1001011000001000010111100 0"
b1001011000001000010111100 L"
b1001011000001000010111100 V"
b1001011000001000010111100 X"
b1001011000001000010111100 b"
b1001011000001000010111100 :$
b1001011000001000010111100 I$
b1001 5"
b1001 "$
b1001 H$
b1001 &$
b1001 +$
b1001 .$
b1001 0$
b1000 0
b1000 x
b1000 $$
b1000 /$
b1000 1$
b110 ^#
1"
#75000
b10000001000010111100 &
b10000001000010111100 _
b10000001000010111100 {#
b0 1"
b0 |#
b0 G$
b0 K
17
1,
1+
b1 X%
b100 ;
b100 H
b100 O
b100 N
0"
#80000
b0 5$
b0 P"
b0 a"
b0 q
b0 I"
b0 f"
b0 8$
b0 <"
b0 R"
b0 c"
b0 4$
0M"
b0 s
b0 J"
b0 e"
b0 T%
0@
b1 B"
b1 S"
b1 \"
b1 3$
b11111111 6$
b1111111100000000 4"
b11111111 O"
b11111111 ]"
b11111111 F"
b11111111 _"
b11111111 t
b11111111 W%
b0 ^"
b0 u
b0 S%
b0 }#
b0 '$
b10000 5%
b10 s$
b0 a$
b0 }$
b0 )%
b0 N%
b0 n
b0 U%
b1001 /"
b1001 ;$
b1001 J$
b0 ^
b0 0"
b0 L"
b0 V"
b0 X"
b0 b"
b0 :$
b0 I$
b0 m
b0 s"
b0 >$
b0 o
b0 l"
b0 E$
b0 2"
b0 N"
b0 Y"
b0 r"
b0 2#
b0 t#
b0 B$
b0 D"
b0 ;#
b0 f#
b0 <$
b0 A"
b0 7#
b0 e#
b0 =$
b111 E
b111 ="
b111 t"
b1 p
b1 }"
b1 N$
b0 g
b0 !#
b0 f$
b0 6%
b1010000001000011111000 9"
b1010000001000011111000 Q"
b1010000001000011111000 Z"
b1010000001000011111000 w"
b1010000001000011111000 (#
b1010000001000011111000 r#
b1010000001000011111000 M$
b1010000001000011111000 Y$
b0 |
b0 Q$
b1001000000000010011100 }
b1001000000000010011100 -#
b1001000000000010011100 s#
b1001000000000010011100 T$
b0 ^#
1"
#85000
b10000001000010111100 1"
b10000001000010111100 |#
b10000001000010111100 G$
07
0,
0+
b0 6$
b0 4"
b0 O"
b0 ]"
b0 F"
b0 _"
b0 t
b0 W%
b0 ;
b0 H
b0 O
b0 N
b0 X%
0"
#90000
b1111111100000000 G
b1111111100000000 ,"
b1111111100000000 r$
b1111111100000000 x$
b10 <"
b10 R"
b10 c"
b10 4$
1M"
b1 s
b1 J"
b1 e"
b1 T%
b1010 %$
b1010 ,$
b1010 -$
b10000 n
b10000 U%
b0 5%
b0 s$
b10000 u
b10000 S%
b10 }#
b10 '$
b1 r
b1 U$
b1 V%
b1010000001000011111000 }
b1010000001000011111000 -#
b1010000001000011111000 s#
b1010000001000011111000 T$
b1111111100000000 j$
b1111111100000000 w$
b1111111100000000 F%
b0 E
b0 ="
b0 t"
b0 p
b0 }"
b0 N$
b0 9"
b0 Q"
b0 Z"
b0 w"
b0 (#
b0 r#
b0 M$
b0 Y$
b1001 m
b1001 s"
b1001 >$
b1 D"
b1 ;#
b1 f#
b1 <$
b1 A"
b1 7#
b1 e#
b1 =$
b10000001000010111100 ^
b10000001000010111100 0"
b10000001000010111100 L"
b10000001000010111100 V"
b10000001000010111100 X"
b10000001000010111100 b"
b10000001000010111100 :$
b10000001000010111100 I$
b1010 5"
b1010 "$
b1010 H$
b1010 &$
b1010 +$
b1010 .$
b1010 0$
b1001 0
b1001 x
b1001 $$
b1001 /$
b1001 1$
b0 ^#
1"
#95000
b1 X%
0"
#95001
